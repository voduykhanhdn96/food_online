{"ast":null,"code":"import { createCart, existCartCustomerWithShop, getCartData, addItem, submitItem, removeItem, unSubmitItem } from \"../../lib/api_cart\";\nimport { createCustomer } from \"../../lib/api_customer\";\nimport { getAllShop } from \"../../lib/api_shop\";\nimport { createOrder, getAllOrder, getOrder } from \"../../lib/api_order\";\nimport { LogLevel, HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { useState } from \"react\";\n\nconst startCons = async () => {\n  const connection = new HubConnectionBuilder().withUrl(\"http://localhost:8080/hubs/cart?cart=44a39f\", {\n    withCredentials: false\n  }).configureLogging(LogLevel.Information).build();\n\n  try {\n    await connection.start();\n  } catch (e) {\n    console.log(e);\n  }\n\n  connection.on(\"AddItemToCart\", message => {}); // connection.on(\"UnsubmitItems\", (message) => {\n  //   console.log(\"you just unsubmtited cart id: \" + message);\n  // });\n};\n\nexport const takeOrder = orderId => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getOrder(orderId);\n      await dispatch({\n        type: \"INITIAL_ORDER\",\n        payload: {\n          order: response\n        }\n      });\n      dispatch({\n        type: \"SETTING_GROUP\",\n        payload: {\n          itemsInCart: response.itemsInCart\n        }\n      });\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const newOrder = (cartId, infomation) => {\n  return async dispatch => {\n    try {\n      const data = await createOrder(cartId, infomation);\n      return data;\n    } catch (error) {}\n  };\n};\nexport const fetchOrder = customerId => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const data = await getAllOrder(customerId);\n      dispatch({\n        type: \"CLEAR_STATUS\"\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n  };\n};\nexport const registerCustomer = data => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await createCustomer(data);\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const submitItemOfCustomer = (items, customerId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await submitItem(items, customerId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const unSubmitItemOfCustomer = (customerId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await unSubmitItem(customerId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const addItemToCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await addItem(customerId, itemId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: \"\" + error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const removeItemFromCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await removeItem(customerId, itemId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const fetchAllShop = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getAllShop();\n      return response;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const checkExistCartCustomerWithShop = (customerId, shopId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const responseCheckCart = await existCartCustomerWithShop(customerId, shopId);\n\n      if (responseCheckCart.status === 204) {\n        const responseRegist = await dispatch(registerCart(customerId, shopId));\n        dispatch(initialCartData(responseRegist.cartId));\n      } else {\n        const data = await responseCheckCart.json();\n        dispatch(initialCartData(data.cartId));\n      }\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n  };\n};\nexport const initialCartData = cartId => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getCartData(cartId);\n      dispatch({\n        type: \"INITIAL_CART\",\n        payload: {\n          cart: response\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const registerCart = (customerId, shopId) => {\n  return async dispatch => {\n    try {\n      const response = await createCart(customerId, shopId);\n      return response;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mac/Documents/GitHub/food_online/src/app/store/actions/shop-action.js"],"names":["createCart","existCartCustomerWithShop","getCartData","addItem","submitItem","removeItem","unSubmitItem","createCustomer","getAllShop","createOrder","getAllOrder","getOrder","LogLevel","HubConnectionBuilder","useState","startCons","connection","withUrl","withCredentials","configureLogging","Information","build","start","e","console","log","on","message","takeOrder","orderId","dispatch","type","response","payload","order","itemsInCart","error","errorMessage","newOrder","cartId","infomation","data","fetchOrder","customerId","registerCustomer","submitItemOfCustomer","items","initialCartData","unSubmitItemOfCustomer","addItemToCart","itemId","removeItemFromCart","fetchAllShop","checkExistCartCustomerWithShop","shopId","responseCheckCart","status","responseRegist","registerCart","json","cart"],"mappings":"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","sourcesContent":["import {\n  createCart,\n  existCartCustomerWithShop,\n  getCartData,\n  addItem,\n  submitItem,\n  removeItem,\n  unSubmitItem,\n} from \"../../lib/api_cart\";\nimport { createCustomer } from \"../../lib/api_customer\";\nimport { getAllShop } from \"../../lib/api_shop\";\nimport { createOrder, getAllOrder, getOrder } from \"../../lib/api_order\";\nimport { LogLevel, HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { useState } from \"react\";\n\nconst startCons = async () => {\n  const connection = new HubConnectionBuilder()\n    .withUrl(\"http://localhost:8080/hubs/cart?cart=44a39f\", {\n      withCredentials: false,\n    })\n    .configureLogging(LogLevel.Information)\n    .build();\n\n  try {\n    await connection.start();\n  } catch (e) {\n    console.log(e);\n  }\n\n  connection.on(\"AddItemToCart\", (message) => {});\n  // connection.on(\"UnsubmitItems\", (message) => {\n  //   console.log(\"you just unsubmtited cart id: \" + message);\n  // });\n};\n\nexport const takeOrder = (orderId) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      const response = await getOrder(orderId);\n      await dispatch({\n        type: \"INITIAL_ORDER\",\n        payload: {\n          order: response,\n        },\n      });\n      dispatch({\n        type: \"SETTING_GROUP\",\n        payload: { itemsInCart: response.itemsInCart },\n      });\n\n      dispatch({ type: \"SUCCESS\" });\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\n\nexport const newOrder = (cartId, infomation) => {\n  return async (dispatch) => {\n    try {\n      const data = await createOrder(cartId, infomation);\n      return data;\n    } catch (error) {}\n  };\n};\n\nexport const fetchOrder = (customerId) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      const data = await getAllOrder(customerId);\n      dispatch({ type: \"CLEAR_STATUS\" });\n      return data;\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n  };\n};\n\nexport const registerCustomer = (data) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      await createCustomer(data);\n      dispatch({ type: \"SUCCESS\" });\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\nexport const submitItemOfCustomer = (items, customerId, cartId) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      await submitItem(items, customerId, cartId);\n      await dispatch(initialCartData(cartId));\n\n      dispatch({ type: \"SUCCESS\" });\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\nexport const unSubmitItemOfCustomer = (customerId, cartId) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      await unSubmitItem(customerId, cartId);\n      await dispatch(initialCartData(cartId));\n\n      dispatch({ type: \"SUCCESS\" });\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\nexport const addItemToCart = (customerId, itemId, cartId) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      await addItem(customerId, itemId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({ type: \"SUCCESS\" });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: { errorMessage: \"\" + error.message },\n      });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\n\nexport const removeItemFromCart = (customerId, itemId, cartId) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      await removeItem(customerId, itemId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({ type: \"SUCCESS\" });\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\n\nexport const fetchAllShop = () => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      const response = await getAllShop();\n      return response;\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\n\nexport const checkExistCartCustomerWithShop = (customerId, shopId) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      const responseCheckCart = await existCartCustomerWithShop(\n        customerId,\n        shopId\n      );\n\n      if (responseCheckCart.status === 204) {\n        const responseRegist = await dispatch(registerCart(customerId, shopId));\n        dispatch(initialCartData(responseRegist.cartId));\n      } else {\n        const data = await responseCheckCart.json();\n        dispatch(initialCartData(data.cartId));\n      }\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n  };\n};\n\nexport const initialCartData = (cartId) => {\n  return async (dispatch) => {\n    dispatch({ type: \"SEND\" });\n    try {\n      const response = await getCartData(cartId);\n      dispatch({\n        type: \"INITIAL_CART\",\n        payload: {\n          cart: response,\n        },\n      });\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\n\nexport const registerCart = (customerId, shopId) => {\n  return async (dispatch) => {\n    try {\n      const response = await createCart(customerId, shopId);\n      return response;\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } });\n    }\n    dispatch({ type: \"CLEAR_STATUS\" });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}