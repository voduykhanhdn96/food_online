{"ast":null,"code":"import { createCart, existCartCustomerWithShop, getCartData, addItem, submitItem, removeItem } from \"../../lib/api_cart\";\nimport { createCustomer } from \"../../lib/api_customer\";\nimport { getAllShop } from \"../../lib/api_shop\";\nexport const registerCustomer = data => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await createCustomer(data);\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const submitItemOfCustomer = (items, customerId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await submitItem(items, customerId, cartId);\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const unSubmitItemOfCustomer = (customerId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await unSubmitItem(customerId, cartId);\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const addItemToCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await addItem(customerId, itemId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const removeItemFromCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await removeItem(customerId, itemId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const fetchAllShop = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getAllShop();\n      return response;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const checkExistCartCustomerWithShop = (customerId, shopId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const responseCheckCart = await existCartCustomerWithShop(customerId, shopId);\n\n      if (responseCheckCart.status === 204) {\n        const responseRegist = await dispatch(registerCart(customerId, shopId));\n        dispatch(initialCartData(responseRegist.cartId));\n      } else {\n        const data = await responseCheckCart.json();\n        dispatch(initialCartData(data.cartId));\n      }\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const initialCartData = cartId => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getCartData(cartId);\n      dispatch({\n        type: \"INITIAL_CART\",\n        payload: {\n          cart: response\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const registerCart = (customerId, shopId) => {\n  return async dispatch => {\n    try {\n      const response = await createCart(customerId, shopId);\n      return response;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/Mock_project/mock-project-store-online/src/app/store/actions/shop-action.js"],"names":["createCart","existCartCustomerWithShop","getCartData","addItem","submitItem","removeItem","createCustomer","getAllShop","registerCustomer","data","dispatch","type","error","payload","errorMessage","message","submitItemOfCustomer","items","customerId","cartId","unSubmitItemOfCustomer","unSubmitItem","addItemToCart","itemId","initialCartData","removeItemFromCart","fetchAllShop","response","checkExistCartCustomerWithShop","shopId","responseCheckCart","status","responseRegist","registerCart","json","cart"],"mappings":"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","sourcesContent":["import {\n  createCart,\n  existCartCustomerWithShop,\n  getCartData,\n  addItem,\n  submitItem,\n  removeItem,\n} from \"../../lib/api_cart\"\nimport { createCustomer } from \"../../lib/api_customer\"\nimport { getAllShop } from \"../../lib/api_shop\"\n\nexport const registerCustomer = data => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await createCustomer(data)\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\nexport const submitItemOfCustomer = (items, customerId, cartId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await submitItem(items, customerId, cartId)\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\nexport const unSubmitItemOfCustomer = (customerId, cartId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await unSubmitItem(customerId, cartId)\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\nexport const addItemToCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await addItem(customerId, itemId, cartId)\n      await dispatch(initialCartData(cartId))\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const removeItemFromCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await removeItem(customerId, itemId, cartId)\n      await dispatch(initialCartData(cartId))\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const fetchAllShop = () => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const response = await getAllShop()\n      return response\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const checkExistCartCustomerWithShop = (customerId, shopId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const responseCheckCart = await existCartCustomerWithShop(\n        customerId,\n        shopId\n      )\n\n      if (responseCheckCart.status === 204) {\n        const responseRegist = await dispatch(registerCart(customerId, shopId))\n        dispatch(initialCartData(responseRegist.cartId))\n      } else {\n        const data = await responseCheckCart.json()\n        dispatch(initialCartData(data.cartId))\n      }\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const initialCartData = cartId => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const response = await getCartData(cartId)\n      dispatch({\n        type: \"INITIAL_CART\",\n        payload: {\n          cart: response,\n        },\n      })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const registerCart = (customerId, shopId) => {\n  return async dispatch => {\n    try {\n      const response = await createCart(customerId, shopId)\n      return response\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}