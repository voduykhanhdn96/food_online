{"ast":null,"code":"const BACKEND_DOMAIN = \"http://localhost:8080/api\";\nexport async function getCartData() {\n  const response = await fetch(`${BACKEND_DOMAIN}/Cart` + this.state.cartId);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  return data;\n}\nexport async function existCartCustomerWithShop(customerId, shopId) {\n  const response = await fetch(`${BACKEND_DOMAIN}/Cart/exist/shop/customer`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      customerId: customerId,\n      shopId: shopId\n    })\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  return data;\n}\n\ncreateCart = () => {\n  fetch(\"https://localhost:5001/api/Cart/Create\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      customerId: this.state.customerId,\n      shopId: this.state.shopId\n    })\n  }).then(response => {\n    return response.json();\n  }).then(data => console.log(data)).catch(err => console.log(err));\n};\n\nsubmitCart = () => {\n  fetch(\"https://localhost:5001/api/Cart/Submit\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      items: [{\n        amount: 2,\n        itemId: this.state.itemId,\n        isDeleted: false\n      }],\n      customerId: this.state.customerId,\n      cartId: this.state.cartId\n    })\n  }).then(response => {\n    return response.json();\n  }).then(data => console.log(data)).catch(err => console.log(err));\n};\n\nunsubmitCart = () => {\n  fetch(\"https://localhost:5001/api/Cart/Unsubmit\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      customerId: this.state.customerId,\n      cartId: this.state.cartId\n    })\n  }).then(response => {\n    return response.json();\n  }).then(data => console.log(data)).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/Mock_project/mock-project-store-online/src/app/lib/api_cart.js"],"names":["BACKEND_DOMAIN","getCartData","response","fetch","state","cartId","data","json","ok","Error","message","existCartCustomerWithShop","customerId","shopId","method","headers","body","JSON","stringify","createCart","then","console","log","catch","err","submitCart","items","amount","itemId","isDeleted","unsubmitCart"],"mappings":"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","sourcesContent":["const BACKEND_DOMAIN = \"http://localhost:8080/api\"\n\nexport async function getCartData() {\n  const response = await fetch(`${BACKEND_DOMAIN}/Cart` + this.state.cartId)\n\n  const data = await response.json()\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\")\n  }\n\n  return data\n}\n\nexport async function existCartCustomerWithShop(customerId, shopId) {\n  const response = await fetch(`${BACKEND_DOMAIN}/Cart/exist/shop/customer`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      customerId: customerId,\n      shopId: shopId,\n    }),\n  })\n\n  const data = await response.json()\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\")\n  }\n\n  return data\n}\n\ncreateCart = () => {\n  fetch(\"https://localhost:5001/api/Cart/Create\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      customerId: this.state.customerId,\n      shopId: this.state.shopId,\n    }),\n  })\n    .then(response => {\n      return response.json()\n    })\n    .then(data => console.log(data))\n    .catch(err => console.log(err))\n}\n\nsubmitCart = () => {\n  fetch(\"https://localhost:5001/api/Cart/Submit\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      items: [\n        {\n          amount: 2,\n          itemId: this.state.itemId,\n          isDeleted: false,\n        },\n      ],\n      customerId: this.state.customerId,\n      cartId: this.state.cartId,\n    }),\n  })\n    .then(response => {\n      return response.json()\n    })\n    .then(data => console.log(data))\n    .catch(err => console.log(err))\n}\n\nunsubmitCart = () => {\n  fetch(\"https://localhost:5001/api/Cart/Unsubmit\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      customerId: this.state.customerId,\n      cartId: this.state.cartId,\n    }),\n  })\n    .then(response => {\n      return response.json()\n    })\n    .then(data => console.log(data))\n    .catch(err => console.log(err))\n}\n"]},"metadata":{},"sourceType":"module"}