{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/food_online/src/app/pages/ViewOrders.jsx\",\n    _s = $RefreshSig$();\n\nimport { AgGridReact } from \"ag-grid-react\";\nimport { useMemo, useRef } from \"react\";\nimport ActionCellRenderer from \"./ViewOrders/ActionCellRenderer\";\nimport StatusCellRenderer from \"./ViewOrders/StatusCellRenderer\";\nimport OrderDetailModal from \"./ViewOrders/OrderDetailModal\";\nimport SectionHeader from \"../components/SectionHeader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getListOrder, getShopDetail } from \"../store/actions/admin-action\";\nimport { useParams } from \"react-router-dom\";\nimport { LogLevel, HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ViewOrders = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const param = useParams();\n  const order = useSelector(state => state.admin.orderList); // never changes, so we can use useMemo\n\n  const columnDefs = useMemo(() => [{\n    field: \"orderId\",\n    pinned: \"left\"\n  }, {\n    field: \"customerName\"\n  }, {\n    field: \"customerPhoneNumber\"\n  }, {\n    field: \"totalPrice\"\n  }, {\n    field: \"status\",\n    cellRenderer: \"statusCellRenderer\"\n  }, {\n    field: \"orderTime\",\n    sort: \"desc\"\n  }, {\n    field: \"action\",\n    pinned: \"right\",\n    cellRenderer: \"actionCellRenderer\",\n    cellRendererParams: {\n      onViewOrder: orderId => viewOrder(orderId)\n    }\n  }], []);\n  const defaultColDef = useMemo(() => ({\n    resizable: true,\n    sortable: true\n  }), []);\n  const startCons = useCallback(async () => {\n    const connection = new HubConnectionBuilder().withUrl(\"http://localhost:8080/hubs/shop?shop=\" + param.shopId, {\n      withCredentials: false\n    }).configureLogging(LogLevel.Information).build();\n\n    try {\n      await connection.start();\n    } catch (e) {\n      console.log(e);\n    }\n\n    connection.on(\"NewOrder\", message => {\n      dispatch(getListOrder(param.shopId));\n    });\n  }, [dispatch, param.shopId]);\n  useEffect(() => {\n    dispatch(getShopDetail(param.shopId));\n  }, [param.shopId, dispatch]);\n  useEffect(() => {\n    dispatch(getListOrder(param.shopId));\n  }, [dispatch, param.shopId]); // changes, needs to be state\n\n  const gridHeight = window.innerHeight;\n  const modalRef = useRef(null);\n\n  const viewOrder = id => {\n    modalRef.current.open(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n      title: \"View Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-material grid-order\",\n      style: {\n        height: gridHeight - 150\n      },\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        reactUi: \"true\",\n        className: \"ag-theme-material\",\n        animateRows: \"true\",\n        columnDefs: columnDefs,\n        defaultColDef: defaultColDef,\n        rowData: order,\n        frameworkComponents: {\n          actionCellRenderer: ActionCellRenderer,\n          statusCellRenderer: StatusCellRenderer\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrderDetailModal, {\n      listOrder: order,\n      ref: modalRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ViewOrders, \"Y0Ct+GBDwMSibGYGcZrdjEXm1Mg=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = ViewOrders;\nexport default ViewOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewOrders\");","map":{"version":3,"sources":["/Users/mac/Documents/GitHub/food_online/src/app/pages/ViewOrders.jsx"],"names":["AgGridReact","useMemo","useRef","ActionCellRenderer","StatusCellRenderer","OrderDetailModal","SectionHeader","useDispatch","useSelector","useEffect","getListOrder","getShopDetail","useParams","LogLevel","HubConnectionBuilder","useCallback","ViewOrders","dispatch","param","order","state","admin","orderList","columnDefs","field","pinned","cellRenderer","sort","cellRendererParams","onViewOrder","orderId","viewOrder","defaultColDef","resizable","sortable","startCons","connection","withUrl","shopId","withCredentials","configureLogging","Information","build","start","e","console","log","on","message","gridHeight","window","innerHeight","modalRef","id","current","open","height","actionCellRenderer","statusCellRenderer"],"mappings":"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","sourcesContent":["import { AgGridReact } from \"ag-grid-react\";\nimport { useMemo, useRef } from \"react\";\nimport ActionCellRenderer from \"./ViewOrders/ActionCellRenderer\";\nimport StatusCellRenderer from \"./ViewOrders/StatusCellRenderer\";\nimport OrderDetailModal from \"./ViewOrders/OrderDetailModal\";\nimport SectionHeader from \"../components/SectionHeader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getListOrder, getShopDetail } from \"../store/actions/admin-action\";\nimport { useParams } from \"react-router-dom\";\nimport { LogLevel, HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { useCallback } from \"react\";\n\nconst ViewOrders = () => {\n  const dispatch = useDispatch();\n  const param = useParams();\n  const order = useSelector((state) => state.admin.orderList);\n  // never changes, so we can use useMemo\n  const columnDefs = useMemo(\n    () => [\n      { field: \"orderId\", pinned: \"left\" },\n      { field: \"customerName\" },\n      { field: \"customerPhoneNumber\" },\n      { field: \"totalPrice\" },\n      { field: \"status\", cellRenderer: \"statusCellRenderer\" },\n      { field: \"orderTime\", sort: \"desc\" },\n      {\n        field: \"action\",\n        pinned: \"right\",\n        cellRenderer: \"actionCellRenderer\",\n        cellRendererParams: {\n          onViewOrder: (orderId) => viewOrder(orderId),\n        },\n      },\n    ],\n    []\n  );\n\n  const defaultColDef = useMemo(\n    () => ({\n      resizable: true,\n      sortable: true,\n    }),\n    []\n  );\n\n  const startCons = useCallback(async () => {\n    const connection = new HubConnectionBuilder()\n      .withUrl(\"http://localhost:8080/hubs/shop?shop=\" + param.shopId, {\n        withCredentials: false,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    try {\n      await connection.start();\n    } catch (e) {\n      console.log(e);\n    }\n\n    connection.on(\"NewOrder\", (message) => {\n      dispatch(getListOrder(param.shopId));\n    });\n  }, [dispatch, param.shopId]);\n\n  useEffect(() => {\n    dispatch(getShopDetail(param.shopId));\n  }, [param.shopId, dispatch]);\n\n  useEffect(() => {\n    dispatch(getListOrder(param.shopId));\n  }, [dispatch, param.shopId]);\n\n  // changes, needs to be state\n  const gridHeight = window.innerHeight;\n\n  const modalRef = useRef(null);\n\n  const viewOrder = (id) => {\n    modalRef.current.open(id);\n  };\n\n  return (\n    <>\n      <SectionHeader title=\"View Orders\"></SectionHeader>\n      <div\n        className=\"ag-theme-material grid-order\"\n        style={{ height: gridHeight - 150 }}\n      >\n        <AgGridReact\n          reactUi=\"true\"\n          className=\"ag-theme-material\"\n          animateRows=\"true\"\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          rowData={order}\n          frameworkComponents={{\n            actionCellRenderer: ActionCellRenderer,\n            statusCellRenderer: StatusCellRenderer,\n          }}\n        />\n      </div>\n      <OrderDetailModal listOrder={order} ref={modalRef}></OrderDetailModal>\n    </>\n  );\n};\n\nexport default ViewOrders;\n"]},"metadata":{},"sourceType":"module"}