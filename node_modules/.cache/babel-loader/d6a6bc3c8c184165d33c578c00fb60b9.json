{"ast":null,"code":"import { createCart, existCartCustomerWithShop, getCartData, addItem, submitItem, removeItem, unSubmitItem } from \"../../lib/api_cart\";\nimport { createCustomer } from \"../../lib/api_customer\";\nimport { getAllShop } from \"../../lib/api_shop\";\nimport { createOrder, getAllOrder, getOrder } from \"../../lib/api_order\";\nexport const takeOrder = orderId => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getOrder(orderId);\n      await dispatch({\n        type: \"INITIAL_ORDER\",\n        payload: {\n          order: response\n        }\n      });\n      dispatch({\n        type: \"SETTING_GROUP\",\n        payload: {\n          itemsInCart: response.itemsInCart\n        }\n      });\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const newOrder = (cartId, infomation) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const data = await createOrder(cartId, infomation);\n      dispatch({\n        type: \"SUCCESS\"\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const fetchOrder = customerId => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const data = await getAllOrder(customerId);\n      dispatch({\n        type: \"SUCCESS\"\n      });\n      return data;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const registerCustomer = data => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await createCustomer(data);\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const submitItemOfCustomer = (items, customerId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await submitItem(items, customerId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const unSubmitItemOfCustomer = (customerId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await unSubmitItem(customerId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const addItemToCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await addItem(customerId, itemId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const removeItemFromCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await removeItem(customerId, itemId, cartId);\n      await dispatch(initialCartData(cartId));\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const fetchAllShop = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getAllShop();\n      return response;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const checkExistCartCustomerWithShop = (customerId, shopId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const responseCheckCart = await existCartCustomerWithShop(customerId, shopId);\n\n      if (responseCheckCart.status === 204) {\n        const responseRegist = await dispatch(registerCart(customerId, shopId));\n        dispatch(initialCartData(responseRegist.cartId));\n      } else {\n        const data = await responseCheckCart.json();\n        dispatch(initialCartData(data.cartId));\n      }\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const initialCartData = cartId => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getCartData(cartId);\n      dispatch({\n        type: \"INITIAL_CART\",\n        payload: {\n          cart: response\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const registerCart = (customerId, shopId) => {\n  return async dispatch => {\n    try {\n      const response = await createCart(customerId, shopId);\n      return response;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/Mock_project/mock-project-store-online/src/app/store/actions/shop-action.js"],"names":["createCart","existCartCustomerWithShop","getCartData","addItem","submitItem","removeItem","unSubmitItem","createCustomer","getAllShop","createOrder","getAllOrder","getOrder","takeOrder","orderId","dispatch","type","response","payload","order","itemsInCart","error","errorMessage","message","newOrder","cartId","infomation","data","fetchOrder","customerId","registerCustomer","submitItemOfCustomer","items","initialCartData","unSubmitItemOfCustomer","addItemToCart","itemId","removeItemFromCart","fetchAllShop","checkExistCartCustomerWithShop","shopId","responseCheckCart","status","responseRegist","registerCart","json","cart"],"mappings":"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","sourcesContent":["import {\n  createCart,\n  existCartCustomerWithShop,\n  getCartData,\n  addItem,\n  submitItem,\n  removeItem,\n  unSubmitItem,\n} from \"../../lib/api_cart\"\nimport { createCustomer } from \"../../lib/api_customer\"\nimport { getAllShop } from \"../../lib/api_shop\"\nimport { createOrder, getAllOrder, getOrder } from \"../../lib/api_order\"\n\nexport const takeOrder = orderId => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const response = await getOrder(orderId)\n      await dispatch({\n        type: \"INITIAL_ORDER\",\n        payload: {\n          order: response,\n        },\n      })\n      dispatch({\n        type: \"SETTING_GROUP\",\n        payload: { itemsInCart: response.itemsInCart },\n      })\n\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const newOrder = (cartId, infomation) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const data = await createOrder(cartId, infomation)\n      dispatch({ type: \"SUCCESS\" })\n      return data\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const fetchOrder = customerId => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const data = await getAllOrder(customerId)\n      dispatch({ type: \"SUCCESS\" })\n      return data\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const registerCustomer = data => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await createCustomer(data)\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\nexport const submitItemOfCustomer = (items, customerId, cartId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await submitItem(items, customerId, cartId)\n      await dispatch(initialCartData(cartId))\n\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\nexport const unSubmitItemOfCustomer = (customerId, cartId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await unSubmitItem(customerId, cartId)\n      await dispatch(initialCartData(cartId))\n\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\nexport const addItemToCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await addItem(customerId, itemId, cartId)\n      await dispatch(initialCartData(cartId))\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const removeItemFromCart = (customerId, itemId, cartId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await removeItem(customerId, itemId, cartId)\n      await dispatch(initialCartData(cartId))\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const fetchAllShop = () => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const response = await getAllShop()\n      return response\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const checkExistCartCustomerWithShop = (customerId, shopId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const responseCheckCart = await existCartCustomerWithShop(\n        customerId,\n        shopId\n      )\n\n      if (responseCheckCart.status === 204) {\n        const responseRegist = await dispatch(registerCart(customerId, shopId))\n        dispatch(initialCartData(responseRegist.cartId))\n      } else {\n        const data = await responseCheckCart.json()\n        dispatch(initialCartData(data.cartId))\n      }\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const initialCartData = cartId => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const response = await getCartData(cartId)\n      dispatch({\n        type: \"INITIAL_CART\",\n        payload: {\n          cart: response,\n        },\n      })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const registerCart = (customerId, shopId) => {\n  return async dispatch => {\n    try {\n      const response = await createCart(customerId, shopId)\n      return response\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}