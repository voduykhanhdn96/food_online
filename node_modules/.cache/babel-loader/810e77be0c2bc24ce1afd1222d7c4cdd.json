{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Projects/Mock_project/mock-project-store-online/src/app/pages/ViewOrders.jsx\",\n    _s = $RefreshSig$();\n\nimport { AgGridReact } from \"ag-grid-react\";\nimport { useMemo, useRef } from \"react\";\nimport ActionCellRenderer from \"./ViewOrders/ActionCellRenderer\";\nimport StatusCellRenderer from \"./ViewOrders/StatusCellRenderer\";\nimport OrderDetailModal from \"./ViewOrders/OrderDetailModal\";\nimport SectionHeader from \"../components/SectionHeader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getListOrder, getShopDetail } from \"../store/actions/admin-action\"; // import { formatCurrency } from \"./../helpers/number-helper\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ViewOrders = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth);\n  const order = useSelector(state => state.admin.orderList); // never changes, so we can use useMemo\n\n  const columnDefs = useMemo(() => [{\n    field: \"orderId\",\n    pinned: \"left\"\n  }, {\n    field: \"customerName\"\n  }, {\n    field: \"customerPhoneNumber\"\n  }, {\n    field: \"totalPrice\"\n  }, {\n    field: \"status\",\n    cellRenderer: \"statusCellRenderer\"\n  }, {\n    field: \"orderTime\",\n    sort: \"desc\"\n  }, {\n    field: \"action\",\n    pinned: \"right\",\n    cellRenderer: \"actionCellRenderer\",\n    cellRendererParams: {\n      onViewOrder: orderId => viewOrder(orderId)\n    }\n  }], []);\n  const defaultColDef = useMemo(() => ({\n    resizable: true,\n    sortable: true\n  }), []);\n  useEffect(() => {\n    dispatch(getShopDetail(auth.shopId));\n  }, [auth, dispatch]);\n  useEffect(() => {\n    dispatch(getListOrder(auth.shopId));\n  }, [dispatch, auth.shopId]); // changes, needs to be state\n\n  const gridHeight = window.innerHeight;\n  const modalRef = useRef(null);\n\n  const viewOrder = id => {\n    modalRef.current.open(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n      title: \"View Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-material grid-order\",\n      style: {\n        height: gridHeight - 150\n      },\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        reactUi: \"true\",\n        className: \"ag-theme-material\",\n        animateRows: \"true\",\n        columnDefs: columnDefs,\n        defaultColDef: defaultColDef,\n        rowData: order,\n        frameworkComponents: {\n          actionCellRenderer: ActionCellRenderer,\n          statusCellRenderer: StatusCellRenderer\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrderDetailModal, {\n      listOrder: order,\n      ref: modalRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ViewOrders, \"iNCTP0Pey2j2s/ACFY+9RSOa+qM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ViewOrders;\nexport default ViewOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewOrders\");","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/Mock_project/mock-project-store-online/src/app/pages/ViewOrders.jsx"],"names":["AgGridReact","useMemo","useRef","ActionCellRenderer","StatusCellRenderer","OrderDetailModal","SectionHeader","useDispatch","useSelector","useEffect","getListOrder","getShopDetail","ViewOrders","dispatch","auth","state","order","admin","orderList","columnDefs","field","pinned","cellRenderer","sort","cellRendererParams","onViewOrder","orderId","viewOrder","defaultColDef","resizable","sortable","shopId","gridHeight","window","innerHeight","modalRef","id","current","open","height","actionCellRenderer","statusCellRenderer"],"mappings":"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","sourcesContent":["import { AgGridReact } from \"ag-grid-react\"\nimport { useMemo, useRef } from \"react\"\nimport ActionCellRenderer from \"./ViewOrders/ActionCellRenderer\"\nimport StatusCellRenderer from \"./ViewOrders/StatusCellRenderer\"\nimport OrderDetailModal from \"./ViewOrders/OrderDetailModal\"\nimport SectionHeader from \"../components/SectionHeader\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useEffect } from \"react\"\nimport { getListOrder, getShopDetail } from \"../store/actions/admin-action\"\n// import { formatCurrency } from \"./../helpers/number-helper\"\n\nconst ViewOrders = () => {\n  const dispatch = useDispatch()\n  const auth = useSelector(state => state.auth)\n  const order = useSelector(state => state.admin.orderList)\n  // never changes, so we can use useMemo\n  const columnDefs = useMemo(\n    () => [\n      { field: \"orderId\", pinned: \"left\" },\n      { field: \"customerName\" },\n      { field: \"customerPhoneNumber\" },\n      { field: \"totalPrice\" },\n      { field: \"status\", cellRenderer: \"statusCellRenderer\" },\n      { field: \"orderTime\", sort: \"desc\" },\n      {\n        field: \"action\",\n        pinned: \"right\",\n        cellRenderer: \"actionCellRenderer\",\n        cellRendererParams: {\n          onViewOrder: orderId => viewOrder(orderId),\n        },\n      },\n    ],\n    []\n  )\n\n  const defaultColDef = useMemo(\n    () => ({\n      resizable: true,\n      sortable: true,\n    }),\n    []\n  )\n\n  useEffect(() => {\n    dispatch(getShopDetail(auth.shopId))\n  }, [auth, dispatch])\n\n  useEffect(() => {\n    dispatch(getListOrder(auth.shopId))\n  }, [dispatch, auth.shopId])\n\n  // changes, needs to be state\n  const gridHeight = window.innerHeight\n\n  const modalRef = useRef(null)\n\n  const viewOrder = id => {\n    modalRef.current.open(id)\n  }\n\n  return (\n    <>\n      <SectionHeader title=\"View Orders\"></SectionHeader>\n      <div\n        className=\"ag-theme-material grid-order\"\n        style={{ height: gridHeight - 150 }}\n      >\n        <AgGridReact\n          reactUi=\"true\"\n          className=\"ag-theme-material\"\n          animateRows=\"true\"\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          rowData={order}\n          frameworkComponents={{\n            actionCellRenderer: ActionCellRenderer,\n            statusCellRenderer: StatusCellRenderer,\n          }}\n        />\n      </div>\n      <OrderDetailModal listOrder={order} ref={modalRef}></OrderDetailModal>\n    </>\n  )\n}\n\nexport default ViewOrders\n"]},"metadata":{},"sourceType":"module"}