{"ast":null,"code":"// ag-grid-react v26.1.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar beansContext_1 = require(\"../beansContext\");\n\nvar useJsCellRenderer = function (showDetails, showTools, toolsValueSpan, jsCellRendererRef, eGui) {\n  var _a = react_1.useContext(beansContext_1.BeansContext),\n      context = _a.context,\n      userComponentFactory = _a.userComponentFactory;\n\n  var destroyCellRenderer = react_1.useCallback(function () {\n    var comp = jsCellRendererRef.current;\n\n    if (!comp) {\n      return;\n    }\n\n    var compGui = comp.getGui();\n\n    if (compGui && compGui.parentElement) {\n      compGui.parentElement.removeChild(compGui);\n    }\n\n    context.destroyBean(comp);\n    jsCellRendererRef.current = undefined;\n  }, []); // create or refresh JS cell renderer\n\n  react_1.useEffect(function () {\n    var showValue = showDetails != null;\n    var jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n    var waitingForToolsSetup = showTools && toolsValueSpan == null;\n    var showComp = showValue && jsCompDetails && !waitingForToolsSetup; // if not showing comp, destroy any existing one and return\n\n    if (!showComp) {\n      destroyCellRenderer();\n      return;\n    }\n\n    var compDetails = showDetails.compDetails;\n\n    if (jsCellRendererRef.current) {\n      // attempt refresh if refresh method exists\n      var comp_1 = jsCellRendererRef.current;\n      var attemptRefresh = comp_1.refresh != null && showDetails.force == false;\n      var refreshResult = attemptRefresh ? comp_1.refresh(compDetails.params) : false;\n      var refreshWorked = refreshResult === true || refreshResult === undefined; // if refresh worked, nothing else to do\n\n      if (refreshWorked) {\n        return;\n      } // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n\n\n      destroyCellRenderer();\n    }\n\n    var promise = userComponentFactory.createInstanceFromCompDetails(compDetails);\n\n    if (!promise) {\n      return;\n    }\n\n    var comp = promise.resolveNow(null, function (x) {\n      return x;\n    }); // js comps are never async\n\n    if (!comp) {\n      return;\n    }\n\n    var compGui = comp.getGui();\n    var parent = showTools ? toolsValueSpan : eGui.current;\n    parent.appendChild(compGui);\n    jsCellRendererRef.current = comp;\n  }, [showDetails, showTools, toolsValueSpan]); // this effect makes sure destroyCellRenderer gets called when the\n  // component is destroyed. as the other effect only updates when there\n  // is a change in state\n\n  react_1.useEffect(function () {\n    return destroyCellRenderer;\n  }, []);\n};\n\nexports.default = useJsCellRenderer;","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/Mock_project/mock-project-store-online/node_modules/ag-grid-react/lib/next/cells/showJsRenderer.js"],"names":["Object","defineProperty","exports","value","react_1","require","beansContext_1","useJsCellRenderer","showDetails","showTools","toolsValueSpan","jsCellRendererRef","eGui","_a","useContext","BeansContext","context","userComponentFactory","destroyCellRenderer","useCallback","comp","current","compGui","getGui","parentElement","removeChild","destroyBean","undefined","useEffect","showValue","jsCompDetails","compDetails","componentFromFramework","waitingForToolsSetup","showComp","comp_1","attemptRefresh","refresh","force","refreshResult","params","refreshWorked","promise","createInstanceFromCompDetails","resolveNow","x","parent","appendChild","default"],"mappings":"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","sourcesContent":["// ag-grid-react v26.1.0\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar beansContext_1 = require(\"../beansContext\");\nvar useJsCellRenderer = function (showDetails, showTools, toolsValueSpan, jsCellRendererRef, eGui) {\n    var _a = react_1.useContext(beansContext_1.BeansContext), context = _a.context, userComponentFactory = _a.userComponentFactory;\n    var destroyCellRenderer = react_1.useCallback(function () {\n        var comp = jsCellRendererRef.current;\n        if (!comp) {\n            return;\n        }\n        var compGui = comp.getGui();\n        if (compGui && compGui.parentElement) {\n            compGui.parentElement.removeChild(compGui);\n        }\n        context.destroyBean(comp);\n        jsCellRendererRef.current = undefined;\n    }, []);\n    // create or refresh JS cell renderer\n    react_1.useEffect(function () {\n        var showValue = showDetails != null;\n        var jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n        var waitingForToolsSetup = showTools && toolsValueSpan == null;\n        var showComp = showValue && jsCompDetails && !waitingForToolsSetup;\n        // if not showing comp, destroy any existing one and return\n        if (!showComp) {\n            destroyCellRenderer();\n            return;\n        }\n        var compDetails = showDetails.compDetails;\n        if (jsCellRendererRef.current) {\n            // attempt refresh if refresh method exists\n            var comp_1 = jsCellRendererRef.current;\n            var attemptRefresh = comp_1.refresh != null && showDetails.force == false;\n            var refreshResult = attemptRefresh ? comp_1.refresh(compDetails.params) : false;\n            var refreshWorked = refreshResult === true || refreshResult === undefined;\n            // if refresh worked, nothing else to do\n            if (refreshWorked) {\n                return;\n            }\n            // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n            destroyCellRenderer();\n        }\n        var promise = userComponentFactory.createInstanceFromCompDetails(compDetails);\n        if (!promise) {\n            return;\n        }\n        var comp = promise.resolveNow(null, function (x) { return x; }); // js comps are never async\n        if (!comp) {\n            return;\n        }\n        var compGui = comp.getGui();\n        var parent = showTools ? toolsValueSpan : eGui.current;\n        parent.appendChild(compGui);\n        jsCellRendererRef.current = comp;\n    }, [showDetails, showTools, toolsValueSpan]);\n    // this effect makes sure destroyCellRenderer gets called when the\n    // component is destroyed. as the other effect only updates when there\n    // is a change in state\n    react_1.useEffect(function () {\n        return destroyCellRenderer;\n    }, []);\n};\nexports.default = useJsCellRenderer;\n"]},"metadata":{},"sourceType":"script"}