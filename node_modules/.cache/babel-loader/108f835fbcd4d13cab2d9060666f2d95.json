{"ast":null,"code":"import { createCart, existCartCustomerWithShop, getCartData } from \"../../lib/api_cart\";\nimport { createCustomer } from \"../../lib/api_customer\";\nimport { getAllShop } from \"../../lib/api_shop\";\nexport const registerCustomer = data => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      await createCustomer(data);\n      dispatch({\n        type: \"SUCCESS\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const fetchAllShop = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getAllShop();\n      return response;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const checkExistCartCustomerWithShop = (customerId, shopId) => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const responseCheckCart = await existCartCustomerWithShop(customerId, shopId);\n\n      if (!responseCheckCart) {\n        const responseRegist = await dispatch(registerCart(customerId, shopId));\n        dispatch(initialCartData(responseRegist.cartId));\n      } else {\n        dispatch(initialCartData(responseCheckCart.cartId));\n      }\n    } catch (error) {\n      console.log('zxczxczx');\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const initialCartData = cartId => {\n  return async dispatch => {\n    dispatch({\n      type: \"SEND\"\n    });\n\n    try {\n      const response = await getCartData(cartId);\n      dispatch({\n        type: \"INITIAL_CART\",\n        payload: {\n          cart: response\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};\nexport const registerCart = (customerId, shopId) => {\n  return async dispatch => {\n    try {\n      const response = await createCart(customerId, shopId);\n      return response;\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        payload: {\n          errorMessage: error.message\n        }\n      });\n    }\n\n    dispatch({\n      type: \"CLEAR_STATUS\"\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/Mock_project/mock-project-store-online/src/app/store/actions/shop-action.js"],"names":["createCart","existCartCustomerWithShop","getCartData","createCustomer","getAllShop","registerCustomer","data","dispatch","type","error","payload","errorMessage","message","fetchAllShop","response","checkExistCartCustomerWithShop","customerId","shopId","responseCheckCart","responseRegist","registerCart","initialCartData","cartId","console","log","cart"],"mappings":"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","sourcesContent":["import {\n  createCart,\n  existCartCustomerWithShop,\n  getCartData,\n} from \"../../lib/api_cart\"\nimport { createCustomer } from \"../../lib/api_customer\"\nimport { getAllShop } from \"../../lib/api_shop\"\n\nexport const registerCustomer = data => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      await createCustomer(data)\n      dispatch({ type: \"SUCCESS\" })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const fetchAllShop = () => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const response = await getAllShop()\n      return response\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const checkExistCartCustomerWithShop = (customerId, shopId) => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const responseCheckCart = await existCartCustomerWithShop(\n        customerId,\n        shopId\n      )\n      \n      if (!responseCheckCart) {\n        const responseRegist = await dispatch(registerCart(customerId, shopId))\n        dispatch(initialCartData(responseRegist.cartId))\n      } else {\n        dispatch(initialCartData(responseCheckCart.cartId))\n      }\n    } catch (error) {\n      console.log('zxczxczx');\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const initialCartData = cartId => {\n  return async dispatch => {\n    dispatch({ type: \"SEND\" })\n    try {\n      const response = await getCartData(cartId)\n      dispatch({\n        type: \"INITIAL_CART\",\n        payload: {\n          cart: response,\n        },\n      })\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n\nexport const registerCart = (customerId, shopId) => {\n  return async dispatch => {\n    try {\n      const response = await createCart(customerId, shopId)\n      return response\n    } catch (error) {\n      dispatch({ type: \"ERROR\", payload: { errorMessage: error.message } })\n    }\n    dispatch({ type: \"CLEAR_STATUS\" })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}